for (i in 1:4){
lines(x, simul_trajectoire(x0, P, 10), col = couleurs[i])
}
x0 <- 2
x <- 0:5
couleurs <- c("red", "green", "yellow", "purple")
plot(x, simul_trajectoire(x0, P, 5), type = "l", col = "blue", ylab = "Trajectoires")
for (i in 1:4){
lines(x, simul_trajectoire(x0, P, 5), col = couleurs[i])
}
x0 <- 2
x <- 0:5
couleurs <- c("red", "green", "yellow", "purple")
plot(x, simul_trajectoire(x0, P, 5), type = "l", col = "blue", ylab = "Trajectoires")
for (i in 1:4){
lines(x, simul_trajectoire(x0, P, 5), col = couleurs[i])
}
knitr::opts_chunk$set(echo = TRUE)
data <- c(0, 0.7, 0.3, 0.3, 0.4, 0.3, 0.5, 0.5, 0)
P <- matrix(data = data, ncol = 3, nrow = 3, byrow = TRUE)
P
puissance_matrice = function(A,n){
M <- A
if (n == 1){
puissance_matrice = A
}
else{
for (i in 2:n){
M = M%*%A
}
puissance_matrice = M
}
}
P_5 <- puissance_matrice(P,5)
P_10 <- puissance_matrice(P,10)
P_20 <- puissance_matrice(P, 20)
P_5
P_10
P_20
simul <- function(x0, P){
u = runif(1)
A = P[x0,]
if (u <= A[1]){
X1 <- 1
}
else{
if (u <= A[1] + A[2]) X1 <- 2
else X1 <- 3
}
simul <- X1
}
print(simul(2,P))
simul_general <- function(Ey, Py){
u <- runif(1)
i<-1
n<-length(Ey)
while(u > cumsum(Py)[i]){
i <- i + 1
}
simul_general<- Ey[i]
}
Ey <- c(1,2,3)
Py <- c(0.3,0.4,0.3)
print(simul_general(Ey,Py))
# simulation de l'état possible du hamster au bout d'une heure
simul_etat_possible <- function(x0, P){
Ey <- c(1, 2, 3)
Py <- P[x0,]
etat_possible <- simul_general(Ey,Py)
}
x0 <- 1
print(simul_etat_possible(x0,P))
# simulation d'une trajectoire de taille n
simul_trajectoire <- function(x0, P, n){
x <- c()
x[1] <- x0
for (i in 1:n){
x[i+1] <- simul_etat_possible(x[1], P)
}
simul_trajectoire <- x
}
print(simul_trajectoire(x0, P, 10))
x0 <- 2
x <- 0:5
couleurs <- c("red", "green", "yellow", "purple")
plot(x, simul_trajectoire(x0, P, 5), type = "l", col = "blue", ylab = "Trajectoires")
for (i in 1:4){
lines(x, simul_trajectoire(x0, P, 5), col = couleurs[i])
}
# simulation de état possible du hamster au bout de n heures
simul_etat_possible_n <- function(x0, P, n){
x = x0
for (i in 1:n){x <- simul_etat_possible(x,P)}
simul_etat_possible_n <- x
}
# N simulations de Xn
simul_N <- function(x0, N, n){
x <- c()
for (i in 1:N){
x[i] <- simul_etat_possible_n(x0, P, n)
}
simul_N <- x
}
x0 <- 2
n <- 50
N <- 1000
x <- prop.table(table(simul_N(x0,N,n))) # pour le calcul des fréquences
barplot(x, col = "blue") # diagramme
x0 <- 2
n <- 10
N <- 1000
x <- prop.table(table(simul_N(x0,N,n))) # pour le calcul des fréquences
barplot(x, col = "blue") # diagramme
knitr::opts_chunk$set(echo = TRUE)
data <- c(0, 0.7, 0.3, 0.3, 0.4, 0.3, 0.5, 0.5, 0)
P <- matrix(data = data, ncol = 3, nrow = 3, byrow = TRUE)
P
puissance_matrice = function(A,n){
M <- A
if (n == 1){
puissance_matrice = A
}
else{
for (i in 2:n){
M = M%*%A
}
puissance_matrice = M
}
}
P_5 <- puissance_matrice(P,5)
P_10 <- puissance_matrice(P,10)
P_20 <- puissance_matrice(P, 20)
P_5
P_10
P_20
simul <- function(x0, P){
u = runif(1)
A = P[x0,]
if (u <= A[1]){
X1 <- 1
}
else{
if (u <= A[1] + A[2]) X1 <- 2
else X1 <- 3
}
simul <- X1
}
print(simul(2,P))
simul_general <- function(Ey, Py){
u <- runif(1)
i<-1
n<-length(Ey)
while(u > cumsum(Py)[i]){
i <- i + 1
}
simul_general<- Ey[i]
}
Ey <- c(1,2,3)
Py <- c(0.3,0.4,0.3)
print(simul_general(Ey,Py))
# simulation de l'état possible du hamster au bout d'une heure
simul_etat_possible <- function(x0, P){
Ey <- c(1, 2, 3)
Py <- P[x0,]
etat_possible <- simul_general(Ey,Py)
}
x0 <- 1
print(simul_etat_possible(x0,P))
# simulation d'une trajectoire de taille n
simul_trajectoire <- function(x0, P, n){
x <- c()
x[1] <- x0
for (i in 1:n){
x[i+1] <- simul_etat_possible(x[1], P)
}
simul_trajectoire <- x
}
print(simul_trajectoire(x0, P, 10))
x0 <- 2
x <- 0:5
couleurs <- c("red", "green", "yellow", "purple")
plot(x, simul_trajectoire(x0, P, 5), type = "l", col = "blue", ylab = "Trajectoires")
for (i in 1:4){
lines(x, simul_trajectoire(x0, P, 5), col = couleurs[i])
}
# simulation de état possible du hamster au bout de n heures
simul_etat_possible_n <- function(x0, P, n){
x = x0
for (i in 1:n){x <- simul_etat_possible(x,P)}
simul_etat_possible_n <- x
}
# N simulations de Xn
simul_N <- function(x0, N, n){
x <- c()
for (i in 1:N){
x[i] <- simul_trajectoire(x0, P, n)
}
simul_N <- x
}
x0 <- 2
n <- 50
N <- 1000
x <- prop.table(table(simul_N(x0,N,n))) # pour le calcul des fréquences
barplot(x, col = "blue") # diagramme
x0 <- 2
n <- 10
N <- 1000
x <- prop.table(table(simul_N(x0,N,n))) # pour le calcul des fréquences
barplot(x, col = "blue") # diagramme
# N simulations de Xn
simul_N <- function(x0, N, n){
x <- c()
for (i in 1:N){
x[i] <- simul_etat_possible_n(x0, P, n)
}
simul_N <- x
}
x0 <- 2
n <- 50
N <- 1000
x <- prop.table(table(simul_N(x0,N,n))) # pour le calcul des fréquences
barplot(x, col = "blue") # diagramme
x0 <- 2
n <- 10
N <- 1000
x <- prop.table(table(simul_N(x0,N,n))) # pour le calcul des fréquences
barplot(x, col = "blue") # diagramme
knitr::opts_chunk$set(echo = TRUE)
data <- c(0, 0.7, 0.3, 0.3, 0.4, 0.3, 0.5, 0.5, 0)
P <- matrix(data = data, ncol = 3, nrow = 3, byrow = TRUE)
#On construit la matrice de transition P
#Implementation d'une fonction "puissance_matrice" qui va calculer la puissance n
#de la matrice P donnée en argument
puissance_matrice = function(A,n){
M <- A
if (n == 1){
puissance_matrice = A
}
else{
for (i in 2:n){
M = M%*%A
}
puissance_matrice = M
}
}
P_5 <- puissance_matrice(P,5) # calcul de ¨P^5
P_10 <- puissance_matrice(P,10)#  calcul de ¨P^10
P_20 <- puissance_matrice(P, 20)#  calcul de ¨P^20
simul <- function(x0, P){ # fonction qui prend en argument un état initial quelconque et la matrice de transition
u = runif(1)
A = P[x0,]
if (u <= A[1]){
X1 <- 1
}
else{
if (u <= A[1] + A[2]) X1 <- 2
else X1 <- 3
}
simul <- X1
}
#Cette fonction va simuler la postion du hamster 1h (n=1) après la position dans laquelle il se trouve à l'instant présent
print(simul(2,P))
simul_Y <- function(Y, Py){
u <- runif(1)
i<-2
n<-length(Y)
if (u<=Py[1]){ result <- Y[1]}
else {
while(i<=n){
if ((u>sum(Py[1:i-1]))&(u<=sum(Py[1:i]))) { break}
else { i <- i+1}
}
result <-Y[i]
}
simul_Y<-result
}
simul_1h <- function(X0,P){
A <- P[X0,]
result<-simul_Y(c(1,2,3),A) # on réutilise la fonction précédente en prennant comme paramètre un vecteur comprennant la liste des états ( l'ensemble E) et la matrice de transition
simul_1h<-result
}
simul_nh <- function(x0,n,P){ # On met X0 en paramètre de la fonction pour simuler une trajectoire du hamster partant d'un état initial quelconque.
traj<-c()
traj[1]<-x0 #mettre x0 vallant 2 pour partir de l'état 2
i=2
while (i<=n+1){
traj[i]<-simul_1h(traj[i-1],P)
i<-i+1
}
simul_nh<-traj
}
n<-5
x<-0:n # Abscisse
y1<-simul_nh(2,n,P)
y2<-simul_nh(2,n,P)
y3<-simul_nh(2,n,P)
y4<-simul_nh(2,n,P)
y5<-simul_nh(2,n,P)
plot(x,y1,xlab="heures",ylab="Etat",ylim=c(1,3),col="red",type="l",main="Tracé de 5 trajectoires")
lines(x,y2,col="blue",type="l")
lines(x,y3,col="green",type="l")
lines(x,y4,col="black",type="l")
lines(x,y5,col="purple",type="l")
box()
simul_N <- function(x0,N,n){
i<-1
simulation<-c()
while(i<=N){
traj<-simul_nh(x0,n,P)
dernier<-length(traj)
simulation[i]<-traj[dernier]
i<-i+1}
simul_N<-simulation
}
print(simul_N(2,10,3))
simulation<-simul_N(2,1000,50)
etat1<-(simulation==1)
etat2<-(simulation==2)
etat3<-(simulation==3)
nb_etat1<-table(etat1)["TRUE"]
nb_etat2<-table(etat2)["TRUE"]
nb_etat3<-table(etat3)["TRUE"]
freq_etat1<-nb_etat1/1000
freq_etat2<-nb_etat2/1000
freq_etat3<-nb_etat3/1000
labels<-c("Etat_1","Etat_2","Etat_3")
pie(c(nb_etat1,nb_etat2,nb_etat3),labels)
# simulation de l'état possible du hamster au bout d'une heure
simul_etat_possible_1h <- function(x0, P){
Ey <- c(1, 2, 3)
Py <- P[x0,]
simul_etat_possible_1h <- simul_general(Ey,Py)
}
x0 <- 1
print(simul_etat_possible_1h(x0,P))
# simulation d'une trajectoire de taille n
simul_trajectoire <- function(x0, P, n){
x <- c()
x[1] <- x0
for (i in 1:n){
x[i+1] <- simul_etat_possible_1h(x[1], P)
}
simul_trajectoire <- x
}
print(simul_trajectoire(x0, P, 10))
x0 <- 2
x <- 0:5
couleurs <- c("red", "green", "yellow", "purple")
plot(x, simul_trajectoire(x0, P, 5), type = "l", col = "blue", ylab = "Trajectoires")
for (i in 1:4){
lines(x, simul_trajectoire(x0, P, 5), col = couleurs[i])
}
x0 <- 2
x <- 0:5
couleurs <- c("red", "green", "yellow", "purple")
plot(x, simul_trajectoire(x0, P, 5), type = "l", col = "blue", ylab = "Trajectoires", main = "Trajetoires de taille 5")
for (i in 1:4){
lines(x, simul_trajectoire(x0, P, 5), col = couleurs[i])
}
x0 <- 2
x <- 0:5
couleurs <- c("red", "green", "yellow", "purple")
plot(x, simul_trajectoire(x0, P, 5), type = "l", col = "blue", ylab = "Trajectoires", main = "Trajetoires de taille 5")
for (i in 1:4){
lines(x, simul_trajectoire(x0, P, 5), col = couleurs[i])
}
# simulation de état possible du hamster au bout de n heures
simul_etat_possible_nh <- function(x0, P, n){
x = x0
for (i in 1:n){x <- simul_etat_possible_1h(x,P)}
simul_etat_possible_nh <- x
}
# N simulations de Xn
simul_N <- function(x0, N, n){
x <- c()
for (i in 1:N){
x[i] <- simul_etat_possible_nh(x0, P, n)
}
simul_N <- x
}
x0 <- 2
n <- 50
N <- 1000
x <- prop.table(table(simul_N(x0,N,n))) # pour le calcul des fréquences
barplot(x, col = "blue") # diagramme
knitr::opts_chunk$set(echo = TRUE)
data <- c(0, 0.7, 0.3, 0.3, 0.4, 0.3, 0.5, 0.5, 0) #vecteur comprenant les données
P <- matrix(data = data, ncol = 3, nrow = 3, byrow = TRUE) #construction de la matrice de transition P
P
puissance_matrice = function(A,n){
M <- A
if (n == 1){
puissance_matrice = A
}
else{
for (i in 2:n){
M = M%*%A
}
puissance_matrice = M
}
}
P_5 <- puissance_matrice(P,5)
P_10 <- puissance_matrice(P,10)
P_20 <- puissance_matrice(P, 20)
P_5
P_10
P_20
simul <- function(x0, P){
u = runif(1)
A = P[x0,]
if (u <= A[1]){
X1 <- 1
}
else{
if (u <= A[1] + A[2]) X1 <- 2
else X1 <- 3
}
simul <- X1
}
#Cette fonction va simuler la postion du hamster 1h (n=1) après la position dans laquelle il se trouve à l'instant présent
print(simul(2,P)) # On teste notre fonction
simul_general <- function(Ey, Py){
u <- runif(1)
i<-1
n<-length(Ey)
while(u > cumsum(Py)[i]){
i <- i + 1
}
simul_general<- Ey[i]
}
Ey <- c(1,2,3)
Py <- c(0.3,0.4,0.3)
print(simul_general(Ey,Py)) # On teste notre fonction
# simulation de l'état possible du hamster au bout d'une heure
simul_etat_possible_1h <- function(x0, P){
Ey <- c(1, 2, 3)
Py <- P[x0,]
simul_etat_possible_1h <- simul_general(Ey,Py)
}
x0 <- 1
print(simul_etat_possible_1h(x0,P))
# simulation d'une trajectoire de taille n
simul_trajectoire <- function(x0, P, n){
x <- c()
x[1] <- x0
for (i in 1:n){
x[i+1] <- simul_etat_possible_1h(x[i], P)
}
simul_trajectoire <- x
}
print(simul_trajectoire(x0, P, 10))
x0 <- 2 # Comme mentionné dans le TP, On initialise à l'état 2
x <- 0:5
couleurs <- c("red", "green", "yellow", "purple") # pour le tracé des 4 autres trajectoires
plot(x, simul_trajectoire(x0, P, 5), type = "l", col = "blue", ylab = "Etats",xlab="Heure" ,main = "Trajectoires de taille 5")# On trace déjà 1 trajectoire dans le plot
for (i in 1:4){
lines(x, simul_trajectoire(x0, P, 5), col = couleurs[i],type="l")
}
# N simulations de Xn
simul_N <- function(x0, N, n){
simulation <- c()
for (i in 1:N){
trajectoire<- simul_trajectoire(x0, P, n)
etat_n<-length(trajectoire)
simulation[i]<-trajectoire[etat_n]
}
simul_N <- simulation
}
x0 <- 2
n <- 100
N <- 1000
x <- prop.table(table(simul_N(x0,N,n))) # pour le calcul des fréquences
barplot(x, col = c(2,3,4),legend.text=c("Etat_1","Etat_2","Etat_3"),args.legend=list(x="topleft"),ylim=c(0,1),xlab="Etat",ylab="Fréquence") # diagramme
x0 <- 2
n <- 70
N <- 1000
x <- prop.table(table(simul_N(x0,N,n))) # pour le calcul des fréquences
freq_etat_1<-x[1]
freq_etat_2<-x[2]
freq_etat_3<-x[3]
freq_etat_1
freq_etat_2
freq_etat_3
x0 <- 2
n <- 70
N <- 1000
v<-simul_N(x0,N,n)
etat1<-(v==1)
etat2<-(v==2)
etat3<-(v==3)
nb_etat1<-table(etat1)["TRUE"]
nb_etat2<-table(etat2)["TRUE"]
nb_etat3<-table(etat3)["TRUE"]
freq_etat1<-nb_etat1/N
freq_etat2<-nb_etat2/N
freq_etat3<-nb_etat3/N
labels<-c("Etat_1","Etat_2","Etat_3")
pie(c(nb_etat1,nb_etat2,nb_etat3),labels)
data = read.table(data1.txt)
setwd("~/mesCours/MAM4/semestre1/Projet/donnees/")
data = read.table(data1.txt)
data = read.table("data1.txt")
data
exit
c
clearPushBack()
knitr::opts_chunk$set(echo = TRUE)
data <- read.table(file = "data1.txt")
data <- read.table(file = "data1.txt")
data.head()
data <- read.table(file = "data1.txt")
head(data)
